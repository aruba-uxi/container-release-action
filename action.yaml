name: "Docker Release"
description: "Build and push docker container to registry"
inputs:
  aws_access_key_id:
    description: ""
    required: true
  aws_secret_access_key:
    description: ""
    required: true
  aws_region:
    description: ""
    required: true
  dockerfile:
    description: "The path to the dockerfile"
    default: "Dockerfile"
    required: false
  image_name:
    description: "The name for the image"
    required: true
  image_tag:
    description: "The image tag to use"
    required: true
  fury_token:
    description: "The token needed for gemfury"
    required: true
  target:
    description: ""
    default: "prod"
    required: false

runs:
  using: "composite"
  steps:
    - name: Run Hadolint
      shell: bash
      run: |
        docker run --rm -i hadolint/hadolint < ${{ inputs.dockerfile }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      id: login_ecr

    - name: Build
      shell: bash
      run: |
        docker build --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury_token }} .

    - name: Push image to Amazon ECR
      shell: bash
      run: |
        set +e
        describe_image="$(aws ecr describe-images --repository-name ${{ inputs.image_name }} --image-ids imageTag=${{ inputs.image_tag }} 2> /dev/null)"
        if [ $? -eq 0 ]; then
          echo "Image ${{ steps.image_tag.outputs.name }} already exists and will not be pushed again."
        else
          export name="${{ steps.login_ecr.outputs.registry }}/${{ inputs.image_name }}:${{ inputs.image_tag }}"
          docker build --file ${{ inputs.dockerfile }} --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury-token }} -t $name .
          docker push $name
        fi
