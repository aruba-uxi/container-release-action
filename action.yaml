name: "Docker Release"
description: "Build and push docker container to registry"
inputs:
  aws-access-key-id:
    description: ""
    required: true
  aws-region:
    description: ""
    required: true
  aws-secret-access-key:
    description: ""
    required: true
  build-context:
    description: "The docker build context. Default=."
    default: "."
    required: false
  dockerfile:
    description: "The path to the dockerfile"
    default: "Dockerfile"
    required: false
  fury-token:
    description: "The token needed for gemfury"
    required: true
  image-name:
    description: "The name for the image"
    required: true
  image-tag:
    description: "The image tag to use"
    required: true
  skip-aws-setup:
    description: "Skip the AWS setup process if it has been run in the same job already"
    required: false
    default: "false"
  skip-aws-push:
    description: "Skip pushing the container image to ECR"
    required: false
    default: "false"
  target:
    description: ""
    default: "prod"
    required: false

runs:
  using: "composite"
  steps:
    - name: Configure AWS Credentials
      if: ${{ inputs.skip-aws-setup == 'false' }}
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}
        mask-aws-account-id: 'true'

    - name: Login to Amazon ECR
      if: ${{ inputs.skip-aws-push == 'false' }}
      uses: aws-actions/amazon-ecr-login@v1
      id: login_ecr
      with:
        mask-password: 'true'    

    - name: Run Hadolint
      shell: bash
      run: |
        docker run --rm -i hadolint/hadolint < ${{ inputs.build-context }}/${{ inputs.dockerfile }}

    - name: Pull mamba base image
      shell: bash
      run: |
        docker pull ${{ steps.login_ecr.outputs.registry }}/uxi/mamba:latest

    - name: Build
      shell: bash
      run: |
        docker build --file ${{ inputs.build-context }}/${{ inputs.dockerfile }} --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury-token }} ${{ inputs.build-context }}

    - name: Push image to Amazon ECR
      if: ${{ inputs.skip-aws-push == 'false' }}
      shell: bash
      run: |
        set +e
        describe_image="$(aws ecr describe-images --repository-name ${{ inputs.image-name }} --image-ids imageTag=${{ inputs.image-tag }} 2> /dev/null)"
        if [ $? -eq 0 ]; then
          echo "Image ${{ inputs.image-tag }} already exists and will not be pushed again."
        else
          export name="${{ steps.login_ecr.outputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}"
          docker build --file ${{ inputs.build-context }}/${{ inputs.dockerfile }} --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury-token }} -t $name ${{ inputs.build-context }}
          docker push $name
        fi
