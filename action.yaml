name: 'Setup Environment'
description: 'Setup the lint/test environment'
inputs:
    dockerfile:
      description: 'The path to the dockerfile'
      default: 'Dockerfile'
      required: false
    image-name:
      description: 'The name for the image. ${GITHUB_REPOSITORY#*/}'
      required: true
    chart:
      description: 'The chart directory name. Usually the name of the service.'
      required: true
    default-branch-name:
      description: 'The default branch name. master or main'
      required: true
    aws-access-key-id:
      description: ''
      required: true
    aws-secret-access-key:
      description: ''
      required: true
    target:
      description: ''
      default: 'prod'
      required: true
    fury-token:
      description: 'The token needed for gemfury'
      required: true
runs:
  using: "composite"
  steps:
    - name: Run Hadolint
      shell: bash
      run: |
        docker run --rm -i hadolint/hadolint < ${{ inputs.dockerfile }}
    - name: Get Docker Image Tag
      shell: bash
      run: |
        echo "::set-output name=name::$(yq e .version charts/${{ inputs.chart }}/Chart.yaml)"
      id: image_tag
        
    - name: Configure AWS Credentials
      if: ${{ github.ref == 'refs/heads/${{ inputs.default-branch-name }}' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      if: ${{ github.ref == 'refs/heads/${{ inputs.default-branch-name }}' }}
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build
      shell: bash
      run: |
        docker build --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury-token }} .
    - name: Push image to Amazon ECR
      if: ${{ github.ref == 'refs/heads/master' || steps.build_beta_release.outputs.result }}
      shell: bash
      run: |
        set +e
        describe_image="$( aws ecr describe-images --repository-name ${{ inputs.image-name }} --image-ids imageTag=${{ steps.image_tag.outputs.name }})"
        if [ $? -eq 0 ]; then
          echo "Image ${{ steps.image_tag.outputs.name }} already exists and will not be pushed again."
        else
          export name="${{ steps.login-ecr.outputs.registry }}/${{ inputs.image-name }}:${{ steps.image_tag.outputs.name }}"
          docker build --file ${{ inputs.dockerfile }} --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury-token }} -t $name .
          docker push $name
        fi
