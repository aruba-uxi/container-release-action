name: "Setup Environment"
description: "Setup the lint/test environment"
inputs:
  aws-access-key-id:
    description: ""
    required: true
  aws-secret-access-key:
    description: ""
    required: true
  aws-region:
    description: ""
    required: true
  dockerfile:
    description: "The path to the dockerfile"
    default: "Dockerfile"
    required: false
  image-name:
    description: "The name for the image"
    required: true
  image-tag:
    description: "The image tag to use"
    required: true
  fury-token:
    description: "The token needed for gemfury"
    required: true
  # default-branch-name:
  #   description: "The default branch name. master or main"
  #   required: true
  target:
    description: ""
    default: "prod"
    required: true

runs:
  using: "composite"
  steps:
    - name: Run Hadolint
      shell: bash
      run: |
        docker run --rm -i hadolint/hadolint < ${{ inputs.dockerfile }}

    # - name: Get Docker Image Tag
    #   shell: bash
    #   run: |
    #     echo "::set-output name=name::$(yq e .version charts/${{ inputs.chart }}/Chart.yaml)"
    #   id: image_tag

    - name: Configure AWS Credentials
      # if: ${{ github.ref == 'refs/heads/${{ inputs.default-branch-name }}' }}
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.aws-region }}

    - name: Login to Amazon ECR
      # if: ${{ github.ref == 'refs/heads/${{ inputs.default-branch-name }}' }}
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build
      shell: bash
      run: |
        docker build --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury-token }} .

    - name: Push image to Amazon ECR
      # if: ${{ github.ref == 'refs/heads/master' || steps.build_beta_release.outputs.result }}
      shell: bash
      run: |
        set +e
        describe_image="$(aws ecr describe-images --repository-name ${{ inputs.image-name }} --image-ids imageTag=${{ inputs.image-tag }} 2> /dev/null)"
        if [ $? -eq 0 ]; then
          echo "Image ${{ steps.image_tag.outputs.name }} already exists and will not be pushed again."
        else
          export name="${{ steps.login-ecr.outputs.registry }}/${{ inputs.image-name }}:${{ inputs.image-tag }}"
          docker build --file ${{ inputs.dockerfile }} --target ${{ inputs.target }} --build-arg FURY_AUTH_PULL=${{ inputs.fury-token }} -t $name .
          docker push $name
        fi
